{"version":3,"sources":["components/TasksFrame/index.js","hooks/completedTasks.js","hooks/groups.js","hooks/currentTask.js","utilities/history.js","components/Auth/index.js","hooks/useUpdateTask.js","hooks/useUpdateGroup.js","components/Text/index.js","components/TaskTime/index.js","components/TextInput/index.js","components/GroupColor/index.js","utilities/color.js","components/CurrentTask/component.js","components/CurrentTask/index.js","components/GroupLabel/index.js","components/CompletedGroupColor/index.js","components/CompletedTask/component.js","components/CompletedTask/index.js","components/CompletedTasks/component.js","components/CompletedTasks/index.js","App.js","serviceWorker.js","index.js","components/Apollo/index.js","hooks/useSession.js","theme.js"],"names":["TaskGrid","styled","div","props","theme","spacing","TasksFrame","children","otherProps","GET_COMPLETED_TASKS","gql","DEFAULT_COMPLETED_TASKS","useCompletedTasks","useQuery","loading","error","data","completedTasks","tasks","GET_GROUPS","DEFAULT_GROUPS","useGroups","groups","GET_CURRENT_TASK","COMPLETE_TASK","COMPLETE_WITH_NEW_GROUP","history","createHistory","DEFAULT_SESSION","SessionContext","React","createContext","UPDATE_TASK","useUpdateTask","task","useMutation","mutate","result","updateTask","useCallback","description","variables","id","update","proxy","update_tasks","returning","writeFragment","defaultDataIdFromObject","fragment","UPDATE_GROUP","useUpdateGroup","group","updateGroup","color","optimisticResponse","update_groups","__typename","Text","span","fontFamily","default","fontSize","textPrimary","p","hero","big","small","textSecondary","TimeText","duration","shortest","TaskTime","time","formattedTime","Date","toTimeString","split","slice","join","TextInput","input","borderRadius","textDisabled","GroupColor","indexes","randomColor","red","Math","floor","random","green","blue","GroupInput","Time","active","DescriptionInput","CurrentTaskComponent","currentTask","onSubmit","currentTaskDescription","currentGroup","find","g","group_id","currentGroupDescription","useState","groupDescription","setGroupDescription","groupColor","setGroupColor","handleGroupDescriptionChange","event","value","target","handleGroupColorClick","taskDescription","setTaskDescription","handleTaskDescriptionChange","handleTaskDescriptionKeydown","key","useEffect","placeholder","onChange","onClick","onKeyDown","CurrentTask","undefined","useCurrentTask","completeTask","groupId","nextId","cuid","end","toISOString","insert_tasks","start","currentTaskUpdate","nextTask","readQuery","query","writeQuery","concat","useCompleteTask","completeWithNewGroup","insert_groups","newGroup","useCompleteTaskWithNewGroup","handleSubmit","Root","Label","GroupLabel","CompletedGroupColor","currentColor","setCurrentColor","handleClick","useMemo","debounce","newColor","memoGroup","index","Title","CompletedTaskComponent","currentDescription","setCurrentDescription","handleTitleChange","handleKeyDown","CompletedTask","DEFAULT_TASKS","CompletedTasksComponent","reduce","idx","source","length","push","lastGroupId","map","CompletedTasks","background","backgroundGradient","Divider","hr","divider","Boolean","window","location","hostname","match","ReactDOM","render","session","setSession","webAuth","auth0","WebAuth","domain","clientID","redirectUri","host","audience","responseType","scope","login","authorize","logout","localStorage","removeItem","return_to","replace","createSession","expiresIn","accessToken","idToken","setItem","expiresAt","getTime","handleAuthentication","parseHash","err","authResult","console","renewSession","checkSession","isCallbackUrl","pathname","startsWith","shouldAuthenticate","test","hash","isLoggedIn","getItem","Provider","useContext","apolloClient","ApolloClient","link","HttpLink","uri","headers","Authorization","cache","InMemoryCache","client","primary","multiplier","short","useLayoutEffect","scrollTo","document","body","scrollHeight","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.779c3752.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TaskGrid = styled.div`\n  display: grid;\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr auto auto 2fr;\n  grid-auto-rows: auto;\n  grid-row-gap: ${ props => props.theme.spacing(2) }px;\n  grid-column-gap: ${ props => props.theme.spacing(4) }px;\n  align-items: end;\n  \n  min-height: 50vh;\n  width: 100%;\n  margin: 0 auto ${ props => props.theme.spacing(4) }px auto;\n`;\n\nexport default function TasksFrame({ children, ...otherProps }) {\n  return (\n    <TaskGrid {...otherProps}>\n      <div/>\n      <div/>\n      <div/>\n      <div/>\n      {children}\n    </TaskGrid>\n  );\n}","import gql from 'graphql-tag';\nimport { useQuery } from \"@apollo/react-hooks\";\n\nexport const GET_COMPLETED_TASKS = gql`\n  query getCompletedTasks {\n    tasks(where: {end: {_is_null: false}}, order_by: {start: asc}) {\n      id\n      group_id\n      start\n      end\n      description\n    }\n  }\n`;\n\nconst DEFAULT_COMPLETED_TASKS = [];\n\nexport function useCompletedTasks() {\n  const { loading, error, data } = useQuery(GET_COMPLETED_TASKS);\n\n  const completedTasks = data ? data.tasks : DEFAULT_COMPLETED_TASKS;\n  return { loading, error, completedTasks };\n}","import React, { useCallback } from 'react';\nimport gql from 'graphql-tag';\nimport cuid from 'cuid';\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { GET_CURRENT_TASK } from \"./currentTask\";\n\nexport const GET_GROUPS = gql`\n  query getGroups {\n    groups {\n      id\n      description\n      color\n    }\n  }\n`;\n\nexport const GET_CURRENT_GROUP = gql`\n  query getCurrentGroup {\n    tasks (where: {end: {_is_null: true}}, limit: 1) {\n      id\n      group {\n        id\n        description\n        color\n      }\n    }\n  }\n`;\n\nexport const CREATE_CURRENT_GROUP = gql`\n  mutation createCurrentGroup ($id: String!, $description: String!) {\n    insert_groups(objects: {id: $id, description: $description, user_id: \"garrett\" }) {\n      returning {\n        id\n        description\n      }\n    }\n    \n    update_tasks(where: {end: {_is_null: true}}, _set: {group_id: $id}) {\n      returning {\n        id\n        group_id\n      }\n    }\n  }\n`;\n\n\nconst DEFAULT_GROUPS = [];\n\nexport function useGroups() {\n  const { loading, error, data } = useQuery(GET_GROUPS);\n  const groups = data ? data.groups : DEFAULT_GROUPS;\n\n  return { loading, error, groups };\n}\n\nexport function useCurrentGroup() {\n  const { loading, error, data } = useQuery(GET_CURRENT_GROUP);\n  const currentGroup = data && data[0]\n    ? data[0].group\n    : undefined;\n\n  return { loading, error, currentGroup };\n}\n\nexport function useCreateCurrentGroup() {\n  const [mutate, result] = useMutation(CREATE_CURRENT_GROUP);\n  const createCurrentGroup = useCallback(\n    ({ id = cuid(), description }) => mutate({\n      variables: { id, description },\n      optimisticResponse: {\n        insert_groups: {\n          __typename: 'groups',\n          returning: [\n            {\n              __typename: 'groups',\n              id,\n              description,\n            }\n          ]\n        },\n        update_tasks: {\n          __typename: 'tasks',\n          returning: [\n            {\n              __typename: 'tasks',\n              group_id: id\n            }\n          ]\n        }\n      },\n      update: (cache, { data: { insert_groups, update_tasks }}) => {\n        const newCurrentGroup = insert_groups.returning[0];\n        const currentTaskUpdate = update_tasks.returning[0];\n\n        const { groups } = cache.readQuery({ query: GET_GROUPS });\n        cache.writeQuery({\n          query: GET_GROUPS,\n          data: { groups: groups.concat([newCurrentGroup]) }\n        });\n\n        console.log('here');\n        const { tasks: [currentTask] } = cache.readQuery({ query: GET_CURRENT_TASK });\n\n        if (currentTask)\n          cache.writeQuery({\n            query: GET_CURRENT_TASK,\n            data: { tasks: [{ ...currentTask, ...currentTaskUpdate }] },\n          });\n      }\n    }),\n    [mutate]\n  );\n\n  return { createCurrentGroup, ...result };\n}","import React, { useCallback } from 'react';\nimport gql from \"graphql-tag\";\nimport cuid from 'cuid';\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { GET_COMPLETED_TASKS } from \"./completedTasks\";\nimport { GET_GROUPS } from \"./groups\";\n\n\nexport const GET_CURRENT_TASK = gql`\n  query getCurrentTask {\n    tasks(where: {end: {_is_null: true}}, limit: 1) {\n      id\n      group_id\n      start\n      end\n      description\n    }\n  }\n`;\n\nexport const COMPLETE_TASK = gql`\n  mutation completeWithNoGroup($description: String!, $groupId: String, $nextId: String!) {\n    update_tasks(where: {end: {_is_null: true}}, _set: {end: \"now()\", description: $description, group_id: $groupId}) {\n      returning {\n        id\n        group_id\n        end\n        description\n      }\n    }\n    \n    insert_tasks(objects: {id: $nextId, group_id: $groupId}) {\n      returning {\n        id\n        group_id\n        start\n        end\n        description\n      }\n    }\n  }\n`;\n\nexport const COMPLETE_WITH_NEW_GROUP = gql`\n  mutation completeWithNewGroup($description: String!, $groupDescription: String!, $groupColor: String, $groupId: String!, $nextId: String!) {\n    insert_groups(objects: {id: $groupId, description: $groupDescription, color: $groupColor}) {\n      returning {\n        id\n        description\n        color\n      }\n    }\n    \n    update_tasks(where: {end: {_is_null: true}}, _set: {end: \"now()\", description: $description, group_id: $groupId}) {\n      returning {\n        id\n        group_id\n        end\n        description\n      }\n    }\n    \n    insert_tasks(objects: {id: $nextId, group_id: $groupId}) {\n      returning {\n        id\n        group_id\n        start\n        end\n        description\n      }\n    }\n  }\n`;\n\nexport function useCompleteTaskWithNewGroup() {\n  const [mutate, result] = useMutation(COMPLETE_WITH_NEW_GROUP);\n  const completeWithNewGroup = useCallback(\n    ({ description, groupDescription, groupColor, groupId = cuid(), nextId = cuid() }) =>\n      mutate({\n        variables: { description, groupDescription, groupColor, groupId, nextId },\n        update: (proxy, { data: { insert_groups, update_tasks, insert_tasks }}) => {\n          const newGroup = insert_groups.returning[0];\n          const currentTaskUpdate = update_tasks.returning[0];\n          const nextTask = insert_tasks.returning[0];\n\n          const { groups } = proxy.readQuery({ query: GET_GROUPS });\n          const { tasks: [currentTask] } = proxy.readQuery({ query: GET_CURRENT_TASK });\n          const { tasks: completedTasks } = proxy.readQuery({ query: GET_COMPLETED_TASKS });\n\n          proxy.writeQuery({\n            query: GET_GROUPS,\n            data: { groups: groups.concat([newGroup]) }\n          });\n\n          proxy.writeQuery({\n            query: GET_COMPLETED_TASKS,\n            data: { tasks: completedTasks.concat([{ ...currentTask, ...currentTaskUpdate }]) }\n          });\n\n          proxy.writeQuery({\n            query: GET_CURRENT_TASK,\n            data: { tasks: [nextTask] },\n          });\n        }\n      }),\n    [mutate]\n  );\n\n  return { completeWithNewGroup, ...result };\n}\n\nexport function useCompleteTask() {\n  const [mutate, result] = useMutation(COMPLETE_TASK);\n  const completeTask = useCallback(\n    ({ description, groupId = null, nextId = cuid() }) =>\n      mutate({\n        variables: { description, groupId, nextId },\n        optimisticResponse: {\n          update_tasks: {\n            __typename: 'tasks',\n            returning: [\n              {\n                __typename: 'tasks',\n                id: '',\n                group_id: groupId,\n                end: new Date().toISOString(),\n                description,\n              }\n            ]\n          },\n          insert_tasks: {\n            __typename: 'tasks',\n            returning: [\n              {\n                __typename: 'tasks',\n                id: '',\n                group_id: groupId,\n                start: new Date().toISOString(),\n                end: null,\n                description: null\n              }\n            ]\n          }\n        },\n        update: (proxy, { data: { update_tasks, insert_tasks } }) => {\n          const currentTaskUpdate = update_tasks.returning[0];\n          const nextTask = insert_tasks.returning[0];\n\n          const { tasks: [currentTask] } = proxy.readQuery({ query: GET_CURRENT_TASK });\n          const { tasks: completedTasks } = proxy.readQuery({ query: GET_COMPLETED_TASKS });\n\n          proxy.writeQuery({\n            query: GET_COMPLETED_TASKS,\n            data: { tasks: completedTasks.concat([{ ...currentTask, ...currentTaskUpdate }]) }\n          });\n\n          proxy.writeQuery({\n            query: GET_CURRENT_TASK,\n            data: { tasks: [nextTask] },\n          });\n        }\n      })\n    ,\n    [mutate]\n  );\n\n  return { completeTask, ...result };\n}\n\nexport function useCurrentTask() {\n  const { loading, error, data } = useQuery(GET_CURRENT_TASK);\n  const currentTask = data ? data.tasks[0] : undefined;\n\n  return { loading, error, currentTask };\n}","import createHistory from 'history/createBrowserHistory';\n\nexport const history = createHistory();\n","import React, { useState, useMemo, useCallback, useEffect, createContext } from 'react';\nimport { history } from \"../../utilities/history\";\nimport auth0 from \"auth0-js\";\n\nconst DEFAULT_SESSION = {};\nexport const SessionContext = React.createContext(DEFAULT_SESSION);\n\n\nexport default function AuthWrapper({ children }) {\n  const [session, setSession] = useState(null);\n\n  const webAuth = useMemo(\n    () => new auth0.WebAuth({\n      domain: 'sparkling-hat-5841.auth0.com',\n      clientID: 'wXmmNlkWyTEP3NOu02ThlR3ySsdRdTjZ',\n      redirectUri: 'http://' + window.location.host + '/callback',\n      audience: 'https://sparkling-hat-5841.auth0.com/userinfo',\n      responseType: 'token id_token',\n      scope: 'openid profile',\n    }),\n  []\n  );\n\n  const login = useCallback(\n    () => webAuth.authorize(),\n    []\n  );\n\n  const logout = useCallback(\n    () => {\n      localStorage && localStorage.removeItem('isLoggedIn');\n      setSession(null);\n\n      webAuth.logout({ return_to: 'http://' + window.location.host + '/' });\n\n      history.replace('/');\n    },\n    []\n  );\n\n  const createSession = useCallback(\n    ({ expiresIn, accessToken, idToken }) => {\n      localStorage && localStorage.setItem('isLoggedIn', true);\n      setSession({\n        expiresAt: expiresIn * 1000 + new Date().getTime(),\n        accessToken,\n        idToken\n      });\n\n      history.replace('/');\n    },\n    [setSession]\n  );\n\n  const handleAuthentication = useCallback(\n    () => webAuth.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        createSession(authResult);\n      } else if (err) {\n        console.error(err);\n        logout();\n      }\n    }),\n    [logout]\n  );\n\n  const renewSession = useCallback(\n    () => webAuth.checkSession({}, (err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        createSession(authResult);\n      } else if (err) {\n        console.error(err);\n        logout();\n      }\n    }),\n    [createSession, logout],\n  );\n\n  useEffect(\n    () => {\n      const location = window.location;\n      const isCallbackUrl = location && location.pathname.startsWith('/callback');\n      const shouldAuthenticate = location && /access_token|id_token|error/.test(location.hash);\n      const isLoggedIn = localStorage && localStorage.getItem('isLoggedIn');\n\n      if (isCallbackUrl && shouldAuthenticate)\n        handleAuthentication();\n      else if (isLoggedIn)\n        renewSession();\n      else\n        login();\n    },\n    []\n  );\n\n  if (session)\n    return (\n      <SessionContext.Provider value={session || DEFAULT_SESSION}>\n        {children}\n      </SessionContext.Provider>\n    );\n  else\n    return <div/>;\n}","import React, { useCallback } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { defaultDataIdFromObject } from \"apollo-cache-inmemory\";\n\nexport const UPDATE_TASK = gql`\n  mutation updateTask($id: String!, $description: String!){\n    update_tasks(where: {id: {_eq: $id}}, _set: {description: $description}) {\n      returning {\n        id\n        description\n      }\n    }\n  }\n`;\n\nexport function useUpdateTask(task) {\n  const [mutate, result] = useMutation(UPDATE_TASK);\n  const updateTask = useCallback(\n    ({ description }) => {\n      if (!task)\n        return;\n\n      return mutate({\n        variables: { id: task.id, description },\n        update: (proxy, { data: { update_tasks } }) => {\n          const taskUpdate = update_tasks.returning[0];\n          const { description } = taskUpdate;\n\n          proxy.writeFragment({\n            id: defaultDataIdFromObject(task),\n            fragment: gql`\n              fragment task on tasks {\n                description\n              }\n            `,\n            data: { description }\n          });\n        }\n      });\n    },\n    [mutate, task]\n  );\n\n  return { updateTask, ...result };\n}","import React, { useCallback } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { defaultDataIdFromObject } from \"apollo-cache-inmemory\";\n\nexport const UPDATE_GROUP = gql`\n  mutation updateGroup($id: String!, $color: String!) {\n    update_groups(where: {id: {_eq: $id}}, _set: {color: $color}) {\n      returning {\n        id\n        color\n      }\n    }\n  }\n`;\n\nexport function useUpdateGroup(group) {\n  const [mutate, result] = useMutation(UPDATE_GROUP);\n  const updateGroup = useCallback(\n    ({ color }) => {\n      if (!group)\n        return;\n\n      return mutate({\n        variables: { id: group.id, color },\n        optimisticResponse: {\n          update_groups: {\n            __typename: 'groups',\n            returning: [\n              {\n                __typename: 'groups',\n                id: group.id,\n                color,\n              }\n            ]\n          }\n        },\n        update: (proxy, { data: { update_groups } }) => {\n          const { color } = update_groups.returning[0];\n\n          proxy.writeFragment({\n            id: defaultDataIdFromObject(group),\n            fragment: gql`\n              fragment group on groups {\n                color\n              }\n            `,\n            data: { color }\n          });\n        }\n      });\n    },\n    [mutate, group]\n  );\n\n  return { updateGroup, ...result };\n}","import styled from \"styled-components\";\n\nconst Text = styled.span`\n  font-family: ${ props => props.theme.fontFamily.default };\n  font-size: ${({ theme }) => theme.fontSize.default };\n  color: ${({ theme }) => theme.color.textPrimary };\n  margin: 0;\n`;\n\nexport default Text;\n\nexport const HeroText = styled.p`\n  font-family: ${ props => props.theme.fontFamily.default };\n  font-size: ${({ theme }) => theme.fontSize.hero };\n  color: ${({ theme }) => theme.color.textPrimary };\n  margin: 0;\n`;\n\nexport const BigText = styled.p`\n  font-family: ${ props => props.theme.fontFamily.default };\n  font-size: ${({ theme }) => theme.fontSize.big };\n  color: ${({ theme }) => theme.color.textPrimary };\n  margin: 0;\n`;\n\nexport const SmallText = styled.p`\n  font-family: ${ props => props.theme.fontFamily.default };\n  font-size: ${({ theme }) => theme.fontSize.small };\n  color: ${({ theme }) => theme.color.textSecondary };\n  margin: 0;\n`;","import React from \"react\";\nimport styled from \"styled-components\";\nimport Text from \"../Text\";\n\nconst TimeText = styled(Text)`\n  min-width: 3.5rem;\n  cursor: default;\n  text-align: right;\n  font-size: 1.2rem;\n  color: ${ props => props.theme.color.textSecondary };\n  transition: color ${ props => props.theme.duration.shortest }ms, background-color ${ props => props.theme.duration.shortest }ms;\n  \n  &:hover, &:focus {\n    color: ${ props => props.theme.color.textPrimary };\n  }\n`;\n\nexport default function TaskTime({ time, ...props }) {\n  let formattedTime = '--:--';\n\n  if (time)\n    formattedTime = new Date(time).toTimeString()\n      .split(':')\n      .slice(0, 2)\n      .join(':');\n\n  return (\n    <TimeText {...props}>\n      {formattedTime}\n    </TimeText>\n  );\n};\n","import styled from \"styled-components\";\n\nconst TextInput = styled.input`\n  display: block;\n  font-family: inherit;\n  font-size: inherit;\n  color: ${ props => props.theme.color.textPrimary };\n  margin: 0;\n  border: none;\n  border-radius: ${ props => props.theme.borderRadius }px;\n  background-color: transparent;\n  padding: 0;\n  transition: color ${ props => props.theme.duration.shortest }ms, background-color ${ props => props.theme.duration.shortest }ms;\n  \n  &:hover, &:focus {\n    color: ${ props => props.theme.color.textPrimary };\n  }\n  \n  &:placeholder-shown {\n    color: ${ props => props.theme.color.textDisabled };\n    transition: none;\n  }\n`;\n\nexport default TextInput;","import React from 'react';\nimport styled from \"styled-components\";\nimport Text from \"../Text\";\n\nconst GroupColor = styled.div`\n  grid-column: 2;\n  grid-row-start: ${ props => props.indexes ? props.indexes[0] + 2 : 'unset' };\n  grid-row-end: ${ props => props.indexes ? props.indexes[1] + 3 : 'unset' };\n  align-self: stretch;\n  width: ${ props => props.theme.spacing(1 / 2) }px;\n  border-radius: ${ props => props.theme.spacing(1) }px;\n  border: 2px solid ${ props => props.group && props.group.color ? props.group.color : props.theme.color.textDisabled };\n  background-color: ${ props => props.group && props.group.description ? props.group.color : 'none' };\n`;\n\nexport default GroupColor;","export const randomColor = () => {\n  const red = Math.floor(Math.random() * 255);\n  const green = Math.floor(Math.random() * 255);\n  const blue = Math.floor(Math.random() * 255);\n\n  return `rgba(${red}, ${green}, ${blue}, 1)`\n};","import React, { Fragment, useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport TaskTime from \"../TaskTime\";\nimport TextInput from \"../TextInput\";\nimport GroupColor from \"../GroupColor\";\nimport {randomColor} from \"../../utilities/color\";\n\nconst GroupInput = styled(TextInput)`\n  grid-column: 1;\n  width: 100%;\n  font-size: 1.5rem;\n  text-align: right;\n  justify-self: right;\n`;\n\nconst Time = styled(TaskTime)`\n  grid-column: 3;\n  \n  margin-top: ${ props => props.theme.spacing(2) }px;\n  font-size: 1.5rem;\n  color: ${ props => props.active ? props.theme.color.textPrimary : props.theme.color.textDisabled };\n  &:hover, &:focus {\n    color: ${ props => props.active ? props.theme.color.textPrimary : props.theme.color.textDisabled };\n  }\n`;\n\nconst DescriptionInput = styled(TextInput)`\n  grid-column: 4;\n  font-size: 1.5rem;\n  color: ${ props => props.theme.color.textPrimary };\n`;\n\nexport default function CurrentTaskComponent({\n  groups = [],\n  currentTask = {},\n  onSubmit,\n}) {\n  const { description: currentTaskDescription } = currentTask;\n  const currentGroup = groups.find(g => g.id === currentTask.group_id);\n  const currentGroupDescription = currentGroup ? currentGroup.description : '';\n\n  const [groupDescription, setGroupDescription] = useState(currentGroupDescription || '');\n  const [groupColor, setGroupColor] = useState();\n\n  const handleGroupDescriptionChange = useCallback(\n    event => {\n      const { value } = event.target;\n      setGroupDescription(value);\n      !value && setGroupColor('');\n    },\n    [setGroupDescription]\n  );\n\n  const handleGroupColorClick = useCallback(\n    () => {\n      if (groupDescription)\n        setGroupColor(randomColor());\n    },\n    [setGroupColor, groupDescription]\n  );\n\n  const [taskDescription, setTaskDescription] = useState(currentTaskDescription || '');\n  const handleTaskDescriptionChange = useCallback(\n    event => {\n      const { value } = event.target;\n      setTaskDescription(value);\n    },\n    [setTaskDescription]\n  );\n\n  const handleTaskDescriptionKeydown = useCallback(\n    event => {\n      const { key } = event;\n\n      if (key === 'Enter' && taskDescription)\n        onSubmit({\n          groupDescription,\n          groupColor,\n          taskDescription\n        });\n    },\n    [groupDescription, taskDescription]\n  );\n\n  useEffect(\n    () => {\n      setTaskDescription(currentTaskDescription || '');\n      setGroupDescription(currentGroupDescription || '');\n    },\n    [currentTask]\n  );\n\n  return (\n    <Fragment>\n      <GroupInput\n        value={groupDescription}\n        placeholder={'Group Description'}\n        onChange={handleGroupDescriptionChange}\n      />\n      <GroupColor\n        onClick={handleGroupColorClick}\n        group={{ description: groupDescription, color: groupColor }}\n      />\n      <Time/>\n      <DescriptionInput\n        value={taskDescription}\n        placeholder={'Task description'}\n        onChange={handleTaskDescriptionChange}\n        onKeyDown={handleTaskDescriptionKeydown}\n      />\n    </Fragment>\n  );\n}","import React, { useCallback, useEffect } from 'react';\nimport { useCurrentTask, useGroups } from \"../../hooks\";\nimport { useCompleteTask, useCompleteTaskWithNewGroup } from \"../../hooks\";\nimport CurrentTaskComponent from \"./component\";\n\nexport default function CurrentTask() {\n  const { groups } = useGroups();\n  const { currentTask } = useCurrentTask();\n  const { completeTask } = useCompleteTask();\n  const { completeWithNewGroup } = useCompleteTaskWithNewGroup();\n\n  const handleSubmit = useCallback(\n    ({ groupDescription, groupColor, taskDescription }) => {\n      const group = groups.find(g => g.description === groupDescription);\n\n      if (groupDescription && !group)\n        completeWithNewGroup({\n          description: taskDescription,\n          groupDescription,\n          groupColor,\n        });\n      else\n        completeTask({\n          description: taskDescription,\n          groupId: group ? group.id : null,\n        });\n    },\n    [groups, completeWithNewGroup, completeTask]\n  );\n\n  return (\n    <CurrentTaskComponent\n      groups={groups}\n      currentTask={currentTask}\n      onSubmit={handleSubmit}\n    />\n  );\n}","import React from 'react';\nimport styled from \"styled-components\";\nimport Text from \"../Text\";\n\nconst Root = styled.div`\n  grid-column: 1;\n  grid-row-start: ${ props => props.indexes[0] + 2 };\n  grid-row-end: ${ props => props.indexes[1] + 3 };\n  align-self: stretch;\n  justify-self: right;\n  display: flex;\n  justify-content: end;\n  align-items: center;\n`;\n\nconst Label = styled(Text)`\n  white-space: nowrap;\n`;\n\nexport default function GroupLabel({ group, ...otherProps}) {\n  return (\n    <Root {...otherProps}>\n      <Label>{ group ? group.description : ''}</Label>\n    </Root>\n  );\n}","import React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport GroupColor from \"../GroupColor\";\nimport { useUpdateGroup } from \"../../hooks\";\nimport {randomColor} from \"../../utilities/color\";\nimport debounce from 'debounce';\n\nexport default function CompletedGroupColor({ group, ...otherProps }) {\n  const { color, description } = group || {};\n  const [currentColor, setCurrentColor] = useState(color);\n  useEffect(() => { setCurrentColor(color); }, [group]);\n\n  const { updateGroup } = useUpdateGroup(group);\n  const debouncedUpdateGroup = useMemo(\n    () => debounce(updateGroup, 500),\n    [updateGroup]\n  );\n\n  const handleClick = useCallback(\n    () => {\n      if (description) {\n        const newColor = randomColor();\n        setCurrentColor(newColor);\n        updateGroup({ color: newColor });\n      }\n    },\n    [setCurrentColor, description]\n  );\n\n  const memoGroup = useMemo(\n    () => ({\n      ...group,\n      color: currentColor,\n    }),\n    [currentColor, group]\n  );\n\n  return (\n    <GroupColor\n      group={memoGroup}\n      onClick={handleClick}\n      {...otherProps}\n    />\n  )\n}","import React, { Fragment, useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport TaskTime from \"../TaskTime\";\nimport TextInput from \"../TextInput\";\n\nconst Time = styled(TaskTime)`\n  grid-row: ${ props => props.index + 1 };\n  grid-column: 3;\n`;\n\nconst Title = styled(TextInput)`\n  font-size: 1.2rem;\n  color: ${ props => props.theme.color.textSecondary };\n  \n  grid-row: ${ props => props.index + 1 };\n  grid-column: 4;\n`;\n\nexport default function CompletedTaskComponent({\n  index,\n  task,\n  onChange,\n  ...otherProps\n}) {\n  const { start, description = '' } = task;\n  const [currentDescription, setCurrentDescription] = useState(description);\n  useEffect(\n    () => { setCurrentDescription(description); },\n    [task]\n  );\n\n  const handleTitleChange = useCallback(\n    event => {\n      const { value } = event.target;\n      setCurrentDescription(value);\n    },\n    [setCurrentDescription]\n  );\n\n  const handleKeyDown = useCallback(\n    event => {\n      const { key } = event;\n      if (key === 'Enter' && currentDescription)\n        onChange({\n          ...task,\n          description: currentDescription\n        });\n    },\n    [currentDescription, onChange]\n  );\n\n  return (\n    <Fragment>\n      <Time index={index} time={start}/>\n      <Title\n        index={index}\n        value={currentDescription}\n        onChange={handleTitleChange}\n        onKeyDown={handleKeyDown}\n      />\n    </Fragment>\n  );\n}","import React from 'react';\nimport { useUpdateTask } from \"../../hooks\";\nimport CompletedTaskComponent from \"./component\";\n\nexport default function CompletedTask({ task, ...otherProps }) {\n  const { updateTask } = useUpdateTask(task);\n\n  return (\n    <CompletedTaskComponent\n      task={task}\n      onChange={updateTask}\n      {...otherProps}\n    />\n  );\n}","import React, { Fragment, useMemo } from 'react';\nimport GroupLabel from \"../GroupLabel\";\nimport CompletedGroupColor from \"../CompletedGroupColor\";\nimport CompletedTask from \"../CompletedTask\";\n\nconst DEFAULT_TASKS = [];\nconst DEFAULT_GROUPS = [];\n\nexport default function CompletedTasksComponent({\n  completedTasks = DEFAULT_TASKS,\n  groups = DEFAULT_GROUPS,\n}) {\n  const groupIndexes = useMemo(\n    () => completedTasks.reduce(\n      (result, task, idx, source) => {\n        if (!result.length) {\n          result.push([idx, idx]);\n          return result;\n        }\n\n        const lastTaskIndex = result[result.length - 1][1];\n        const lastTask = source[lastTaskIndex];\n        const lastGroupId = lastTask.group_id;\n\n        if (task.group_id === lastGroupId)\n          result[result.length - 1][1] = idx;\n        else\n          result.push([idx, idx]);\n\n        return result;\n      },\n      []\n    ),\n    [completedTasks]\n  );\n\n  return groupIndexes\n    .map(indexes => {\n      const task = completedTasks[indexes[0]];\n      const group = groups.find(g => g.id === task.group_id);\n\n      return (\n        <Fragment>\n          <GroupLabel group={group} indexes={indexes}/>\n          <CompletedGroupColor group={group} indexes={indexes}/>\n        </Fragment>\n      )\n    })\n    .concat(completedTasks.map(\n      (task, idx) => (\n        <CompletedTask\n          index={idx + 1}\n          task={task}\n        />\n      )\n    ));\n}","import React from 'react';\nimport { useGroups, useCompletedTasks } from \"../../hooks\";\nimport CompletedTasksComponent from \"./component\";\n\nexport default function CompletedTasks() {\n  const { groups } = useGroups();\n  const { completedTasks } = useCompletedTasks();\n\n  return (\n    <CompletedTasksComponent\n      groups={groups}\n      completedTasks={completedTasks}\n    />\n  );\n}","import React, { Fragment, useMemo, useEffect, useLayoutEffect } from 'react';\nimport styled from \"styled-components\";\nimport TasksFrame from \"./components/TasksFrame\";\nimport CurrentTask from \"./components/CurrentTask\";\nimport CompletedTasks from \"./components/CompletedTasks\";\nimport { useCompletedTasks } from \"./hooks\";\n\nconst Root = styled.div`\n  min-height: 100vh;\n  overflow-y: auto;\n  background-color: ${({ theme }) => theme.color.background};\n  background: ${ props => props.theme.color.backgroundGradient };\n  font-family: ${ props => props.theme.fontFamily.default };\n  font-size: ${ props => props.theme.fontSize.default };\n`;\n\nconst Divider = styled.hr`\n  color: ${ props => props.theme.color.divider };\n  width: 75%;\n  margin: 0 auto calc(50vh - ${ props => props.theme.spacing(4) + 2 }px) auto;\n`;\n\nexport default function App() {\n  const { completedTasks } = useCompletedTasks();\n  useLayoutEffect(\n    () => { window.scrollTo(0, document.body.scrollHeight) },\n    [completedTasks.length]\n  );\n\n  return (\n    <Root>\n      <TasksFrame>\n        <CompletedTasks/>\n        <CurrentTask/>\n      </TasksFrame>\n      <Divider/>\n    </Root>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from \"styled-components\";\nimport AuthWrapper from \"./components/Auth\";\nimport Apollo from \"./components/Apollo\";\nimport theme from './theme';\n\n\nReactDOM.render(\n  <AuthWrapper>\n    <Apollo>\n      <ThemeProvider theme={theme}>\n        <App/>\n      </ThemeProvider>\n    </Apollo>\n  </AuthWrapper>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useMemo } from 'react';\nimport { useSession } from \"../../hooks\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from 'react-apollo';\nimport {HttpLink} from \"apollo-link-http\";\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\n\nexport default function Apollo({ children }) {\n  const { idToken } = useSession();\n\n  const apolloClient = useMemo(\n    () => new ApolloClient({\n      link: new HttpLink({\n        uri: 'https://koule-api.herokuapp.com/v1/graphql',\n        headers: {\n          Authorization: 'Bearer ' + idToken,\n        }\n      }),\n      cache: new InMemoryCache(),\n    }),\n    [idToken]\n  );\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      {children}\n    </ApolloProvider>\n  );\n}","import React, { useContext } from 'react';\nimport { SessionContext } from \"../components/Auth\";\n\nexport function useSession() {\n  return useContext(SessionContext);\n}","export default {\n  fontFamily: {\n    default: \"'Arvo', serif\"\n  },\n  fontSize: {\n    hero: '3rem',\n    big: '1.3rem',\n    default: '1rem',\n    small: '0.75rem',\n  },\n  color: {\n    background: '#191919',\n    backgroundGradient: 'linear-gradient(#333333, #191919)',\n    textPrimary: 'rgba(255, 255, 255, 0.89)',\n    textSecondary: 'rgba(255, 255, 255, 0.7)',\n    textDisabled: 'rgba(255, 255, 255, 0.3)',\n    primary: '#27AE60',\n    divider: 'rgba(255, 255, 255, 0.6)',\n  },\n  spacing: multiplier => 8 * multiplier,\n  borderRadius: 4,\n  duration: {\n    default: 500,\n    short: 250,\n    shortest: 175,\n  }\n}"],"sourceRoot":""}